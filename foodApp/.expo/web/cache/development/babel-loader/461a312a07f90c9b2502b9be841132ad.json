{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nyarko Betrand\\\\Desktop\\\\work\\\\foodDelivery\\\\foodApp\\\\screens\\\\OrderScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { TabView, SceneMap, TabBar } from 'react-native-tab-view';\nimport COLORS from \"../assets/colors/colors\";\nimport HeaderAnnex from \"../components/Shared/HeaderAnnex\";\nimport ConfirmScreen from \"./ConfirmScreen\";\nimport SummaryScreen from \"./SummaryScreen\";\nimport BoldText, { RegularText } from \"../components/Shared/StyledText\";\n\nfunction CustomTabView(props) {\n  var _this = this;\n\n  var _useState = useState({\n    index: 0,\n    routes: [{\n      key: 'first',\n      title: 'Confirm'\n    }, {\n      key: 'second',\n      title: 'Summary'\n    }]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _handleIndexChange = function _handleIndexChange(index) {\n    return setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        index: index\n      });\n    });\n  };\n\n  var _renderTabBar = function _renderTabBar(props) {\n    var inputRange = props.navigationState.routes.map(function (x, i) {\n      return i;\n    });\n    return React.createElement(TabBar, _extends({}, props, {\n      style: {\n        backgroundColor: 'white'\n      },\n      activeColor: COLORS.green,\n      inactiveColor: \"grey\",\n      renderLabel: function renderLabel(_ref) {\n        var route = _ref.route,\n            focused = _ref.focused,\n            color = _ref.color;\n        return React.createElement(View, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }\n        }, React.createElement(RegularText, {\n          style: {\n            fontSize: 15,\n            color: focused ? COLORS.green : 'grey'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }\n        }, route.title));\n      },\n      labelStyle: {\n        fontSize: 12,\n        fontWeight: 'bold'\n      },\n      indicatorStyle: {\n        padding: 1.5,\n        marginLeft: 0,\n        backgroundColor: COLORS.green\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }));\n  };\n\n  var _renderScene = SceneMap({\n    first: ConfirmScreen,\n    second: SummaryScreen\n  });\n\n  return React.createElement(TabView, {\n    style: {\n      backgroundColor: 'white'\n    },\n    navigationState: state,\n    renderScene: _renderScene,\n    renderTabBar: _renderTabBar,\n    onIndexChange: _handleIndexChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default function OrderScreen(_ref2) {\n  var navigation = _ref2.navigation,\n      route = _ref2.route;\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  function handleChangeIndex(state) {\n    setState(state.index);\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: styles.androidSafeArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, React.createElement(HeaderAnnex, {\n    titleAlign: \"center\",\n    title: \"Order and Summary\",\n    subtitle: \"View your Orders and Receipts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), React.createElement(CustomTabView, {\n    onChangeIndex: handleChangeIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  androidSafeArea: {\n    flex: 1,\n    paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0\n  }\n});","map":{"version":3,"sources":["C:/Users/Nyarko Betrand/Desktop/work/foodDelivery/foodApp/screens/OrderScreen.js"],"names":["React","useContext","useState","TabView","SceneMap","TabBar","COLORS","HeaderAnnex","ConfirmScreen","SummaryScreen","BoldText","RegularText","CustomTabView","props","index","routes","key","title","state","setState","_handleIndexChange","prevState","_renderTabBar","inputRange","navigationState","map","x","i","backgroundColor","green","route","focused","color","fontSize","fontWeight","padding","marginLeft","_renderScene","first","second","OrderScreen","navigation","handleChangeIndex","styles","androidSafeArea","StyleSheet","create","flex","paddingTop","Platform","OS","StatusBar","currentHeight"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport { View, Text, TouchableOpacity, StyleSheet, Platform, StatusBar, SafeAreaView, FlatList } from 'react-native'\r\nimport { TabView, SceneMap, TabBar } from 'react-native-tab-view';\r\nimport COLORS from '../assets/colors/colors';\r\nimport HeaderAnnex from '../components/Shared/HeaderAnnex'\r\nimport ConfirmScreen from './ConfirmScreen';\r\nimport SummaryScreen from './SummaryScreen';\r\nimport BoldText, { RegularText } from '../components/Shared/StyledText';\r\n\r\n\r\n\r\nfunction CustomTabView(props) {\r\n    const [state, setState] = useState({\r\n        index: 0,\r\n        routes: [\r\n            { key: 'first', title: 'Confirm' },\r\n            { key: 'second', title: 'Summary' },\r\n\r\n        ],\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //   props.onChangeIndex(state);\r\n    // }, [state]);\r\n\r\n    const _handleIndexChange = index =>\r\n        setState(prevState => ({ ...prevState, index: index }));\r\n\r\n    const _renderTabBar = props => {\r\n        const inputRange = props.navigationState.routes.map((x, i) => i);\r\n\r\n        return (\r\n            <TabBar\r\n                {...props}\r\n                style={{ backgroundColor: 'white' }}\r\n                activeColor={COLORS.green}\r\n                inactiveColor=\"grey\"\r\n                renderLabel={({ route, focused, color }) => (\r\n                    <View>\r\n                        <RegularText style={{ fontSize: 15, color: focused ? COLORS.green : 'grey' }}>\r\n                            {route.title}\r\n                        </RegularText>\r\n                    </View>\r\n                )}\r\n                labelStyle={{ fontSize: 12, fontWeight: 'bold' }}\r\n                indicatorStyle={{\r\n\r\n                    padding: 1.5,\r\n                    marginLeft: 0,\r\n                    backgroundColor: COLORS.green,\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    const _renderScene = SceneMap({\r\n        first: ConfirmScreen,\r\n        second: SummaryScreen,\r\n\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <TabView\r\n            style={{ backgroundColor: 'white' }}\r\n            navigationState={state}\r\n            renderScene={_renderScene}\r\n            renderTabBar={_renderTabBar}\r\n            onIndexChange={_handleIndexChange}\r\n        />\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default function OrderScreen({ navigation, route }) {\r\n\r\n\r\n    const [state, setState] = useState(0);\r\n\r\n    function handleChangeIndex(state) {\r\n        setState(state.index);\r\n    }\r\n\r\n    return (\r\n        <SafeAreaView style={styles.androidSafeArea}>\r\n            <HeaderAnnex titleAlign=\"center\" title=\"Order and Summary\" subtitle=\"View your Orders and Receipts\" />\r\n            <CustomTabView onChangeIndex={handleChangeIndex} />\r\n        </SafeAreaView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    androidSafeArea: {\r\n        flex: 1,\r\n        paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\r\n    },\r\n\r\n})\r\n"]},"metadata":{},"sourceType":"module"}