{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { Svg, Path } from 'react-native-svg';\n\nvar IconMoon = function IconMoon(_ref) {\n  var iconSet = _ref.iconSet,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 32 : _ref$size,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? '#222' : _ref$color,\n      name = _ref.name,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0 : _ref$offset,\n      _ref$strokeWidth = _ref.strokeWidth,\n      strokeWidth = _ref$strokeWidth === void 0 ? 1 : _ref$strokeWidth;\n\n  if (!iconSet || !name) {\n    console.error('The \"iconSet\" and \"name\" props are required.');\n    return null;\n  }\n\n  var viewBoxMax = 1024;\n  var localOffset = offset / 2 * -viewBoxMax;\n  var offsetedViewBox = viewBoxMax - localOffset;\n  var currentIcon = useMemo(function () {\n    return iconSet.icons.map(function (i) {\n      return {\n        name: i.properties.name,\n        paths: i.icon.paths\n      };\n    }).find(function (i) {\n      return i.name === name;\n    });\n  }, [iconSet, name]);\n\n  if (currentIcon === undefined) {\n    console.error(\"Icon \\\"\".concat(name, \"\\\" not found.\"));\n    return null;\n  }\n\n  var paths = currentIcon.paths.map(function (p, i) {\n    return React.createElement(Path, {\n      key: String(i),\n      d: p,\n      strokeWidth: 5 * strokeWidth,\n      stroke: color\n    });\n  });\n  return React.createElement(Svg, {\n    width: String(size),\n    height: String(size),\n    fill: color,\n    viewBox: \"\".concat(localOffset, \" \").concat(localOffset, \" \").concat(offsetedViewBox, \" \").concat(offsetedViewBox)\n  }, paths);\n};\n\nexport function iconList(iconSet) {\n  if (iconSet && Array.isArray(iconSet.icons)) {\n    return iconSet.icons.map(function (icon) {\n      return icon.properties.name;\n    });\n  }\n\n  return null;\n}\nexport default IconMoon;","map":{"version":3,"sources":["index.tsx"],"names":["IconMoon","size","color","offset","strokeWidth","console","viewBoxMax","localOffset","offsetedViewBox","currentIcon","useMemo","i","name","paths","String","iconSet","Array","icon"],"mappings":"AAAA,OAAA,KAAA,IAAA,OAAA,QAAA,OAAA;AAEA,SAAA,GAAA,EAAA,IAAA,QAAA,kBAAA;;AAoBA,IAAMA,QAAiC,GAAG,SAApCA,QAAoC,OAOpC;AAAA,MAPqC,OAOrC,QAPqC,OAOrC;AAAA,uBALJC,IAKI;AAAA,MALJA,IAKI,0BAPqC,EAOrC;AAAA,wBAJJC,KAII;AAAA,MAJJA,KAII,2BAPqC,MAOrC;AAAA,MAPqC,IAOrC,QAPqC,IAOrC;AAAA,yBAFJC,MAEI;AAAA,MAFJA,MAEI,4BAPqC,CAOrC;AAAA,8BADJC,WACI;AAAA,MADJA,WACI,iCADU,CACV;;AACJ,MAAI,CAAA,OAAA,IAAY,CAAhB,IAAA,EAAuB;AACrBC,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,8CAAAA;AACA,WAAA,IAAA;AACD;;AAED,MAAMC,UAAU,GAAhB,IAAA;AACA,MAAMC,WAAW,GAAIJ,MAAM,GAAP,CAACA,GAAc,CAAnC,UAAA;AACA,MAAMK,eAAe,GAAGF,UAAU,GAR9B,WAQJ;AAGA,MAAMG,WAAgC,GAAGC,OAAO,CAAC,YAAM;AACrD,WAAO,OAAO,CAAP,KAAA,CAAA,GAAA,CACCC,UAAAA,CAAD,EAAY;AACf,aAAO;AACLC,QAAAA,IAAI,EAAED,CAAC,CAADA,UAAAA,CADD,IAAA;AAELE,QAAAA,KAAK,EAAEF,CAAC,CAADA,IAAAA,CAAOE;AAFT,OAAP;AAFG,KAAA,EAAA,IAAA,CAOEF,UAAAA,CAAD,EAAgB;AACpB,aAAOA,CAAC,CAADA,IAAAA,KAAP,IAAA;AARJ,KAAO,CAAP;AAD8C,GAAA,EAW7C,CAAA,OAAA,EAXH,IAWG,CAX6C,CAAhD;;AAaA,MAAIF,WAAW,KAAf,SAAA,EAA+B;AAC7BJ,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,UAAAA,MAAAA,CAAAA,IAAAA,EAAAA,eAAAA,CAAAA;AACA,WAAA,IAAA;AACD;;AAED,MAAMQ,KAAK,GAAG,WAAW,CAAX,KAAA,CAAA,GAAA,CAAsB,UAAA,CAAA,EAAA,CAAA;AAAA,WAClC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,GAAG,EAAEC,MAAM,CAAjB,CAAiB,CAAjB;AAAsB,MAAA,CAAC,EAAvB,CAAA;AAA4B,MAAA,WAAW,EAAE,IAAzC,WAAA;AAA0D,MAAA,MAAM,EAAEZ;AAAlE,KAAA,CADkC;AAAA,GAAtB,CAAd;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,IAAA,KAAK,EAAEY,MAAM,CADf,IACe,CADf;AAEE,IAAA,MAAM,EAAEA,MAAM,CAFhB,IAEgB,CAFhB;AAGE,IAAA,IAAI,EAHN,KAAA;AAIE,IAAA,OAAO,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA,GAAA,EAAA,MAAA,CAAA,WAAA,EAAA,GAAA,EAAA,MAAA,CAAA,eAAA,EAAA,GAAA,EAAA,MAAA,CAAA,eAAA;AAJT,GAAA,EADF,KACE,CADF;AAxCF,CAAA;;AAoDA,OAAO,SAAA,QAAA,CAAA,OAAA,EAAoC;AACzC,MAAIC,OAAO,IAAIC,KAAK,CAALA,OAAAA,CAAcD,OAAO,CAApC,KAAeC,CAAf,EAA6C;AAC3C,WAAOD,OAAO,CAAPA,KAAAA,CAAAA,GAAAA,CAAmBE,UAAAA,IAAD;AAAA,aAAUA,IAAI,CAAJA,UAAAA,CAAnC,IAAyB;AAAA,KAAlBF,CAAP;AACD;;AACD,SAAA,IAAA;AACD;AAED,eAAA,QAAA","sourcesContent":["import React, { useMemo } from 'react'\n//@ts-ignore\nimport { Svg, Path } from 'react-native-svg'\n\nexport interface IconSet {\n  icons: Array<any>\n}\n\nexport interface IconMoonProps {\n  iconSet: IconSet\n  name: string\n  color?: string\n  size?: number\n  strokeWidth?: number\n  offset?: number // some icon might have different padding, use this to offset it\n}\n\nexport interface IconMap {\n  name: string\n  paths: Array<string>\n}\n\nconst IconMoon: React.FC<IconMoonProps> = ({\n  iconSet,\n  size = 32,\n  color = '#222',\n  name,\n  offset = 0,\n  strokeWidth = 1,\n}) => {\n  if (!iconSet || !name) {\n    console.error('The \"iconSet\" and \"name\" props are required.')\n    return null\n  }\n\n  const viewBoxMax = 1024\n  const localOffset = (offset / 2) * -viewBoxMax\n  const offsetedViewBox = viewBoxMax - localOffset\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const currentIcon: IconMap | undefined = useMemo(() => {\n    return iconSet.icons\n      .map((i: any) => {\n        return {\n          name: i.properties.name,\n          paths: i.icon.paths,\n        } as IconMap\n      })\n      .find((i: IconMap) => {\n        return i.name === name\n      })\n  }, [iconSet, name])\n\n  if (currentIcon === undefined) {\n    console.error(`Icon \"${name}\" not found.`)\n    return null\n  }\n\n  const paths = currentIcon.paths.map((p, i) => (\n    <Path key={String(i)} d={p} strokeWidth={5 * strokeWidth} stroke={color} />\n  ))\n\n  return (\n    <Svg\n      width={String(size)}\n      height={String(size)}\n      fill={color}\n      viewBox={`${localOffset} ${localOffset} ${offsetedViewBox} ${offsetedViewBox}`}\n    >\n      {paths}\n    </Svg>\n  )\n}\n\nexport function iconList(iconSet: IconSet) {\n  if (iconSet && Array.isArray(iconSet.icons)) {\n    return iconSet.icons.map((icon) => icon.properties.name)\n  }\n  return null\n}\n\nexport default IconMoon\n"]},"metadata":{},"sourceType":"module"}