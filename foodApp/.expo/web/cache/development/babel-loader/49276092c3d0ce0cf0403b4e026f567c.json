{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nyarko Betrand\\\\Desktop\\\\work\\\\foodDelivery\\\\foodApp\\\\components\\\\Shared\\\\Input.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport BoldText from \"./StyledText\";\nimport Icon from \"@expo/vector-icons/Entypo\";\nimport Row from \"./Row\";\nimport COLORS from \"../../assets/colors/colors\";\nexport default function Input(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focus = _useState2[0],\n      setFocus = _useState2[1];\n\n  return React.createElement(View, {\n    style: {\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, props.showLabel ? React.createElement(BoldText, {\n    style: {\n      color: 'grey',\n      fontWeight: '400'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, props.label) : null, React.createElement(Row, {\n    style: [style.main, {\n      borderWidth: 0.6,\n      backgroundColor: \"transparent\",\n      borderColor: focus ? COLORS.green : '#e3e3e3'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, _extends({\n    onFocus: function onFocus() {\n      return setFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setFocus(false);\n    }\n  }, props, {\n    style: [_objectSpread({\n      padding: 13,\n      fontSize: 16,\n      fontFamily: 'Rubik-Regular'\n    }, props.style)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }))), props.loading ? React.createElement(ActivityIndicator, {\n    color: COLORS.green,\n    style: {\n      paddingRight: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }) : null));\n}\nexport function Password(props) {\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showPassword = _useState4[0],\n      setShowPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      focus = _useState6[0],\n      setFocus = _useState6[1];\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, props.showLabel ? React.createElement(BoldText, {\n    style: {\n      fontWeight: '400'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 26\n    }\n  }, props.label) : null, React.createElement(View, {\n    style: [style.mainpass, {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 100,\n      paddingVertical: Platform.OS === 'android' ? 3 : 13,\n      backgroundColor: \"transparent\",\n      borderColor: focus ? COLORS.green : '#e3e3e3'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, _extends({\n    secureTextEntry: showPassword,\n    onBlur: function onBlur() {\n      return setFocus(false);\n    },\n    onFocus: function onFocus() {\n      return setFocus(true);\n    }\n  }, props, {\n    style: [{\n      flex: 1,\n      fontSize: 16\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      setShowPassword(!showPassword);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    color: \"grey\",\n    name: showPassword ? 'eye-with-line' : 'eye',\n    size: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }))));\n}\nvar style = StyleSheet.create({\n  main: {\n    backgroundColor: '#f2f2f2',\n    borderWidth: 0.4,\n    marginTop: 7,\n    borderRadius: 5,\n    borderColor: '#e3e3e3'\n  },\n  mainpass: {\n    backgroundColor: '#f2f2f2',\n    borderRadius: 5,\n    borderColor: '#e3e3e3',\n    width: 300\n  }\n});","map":{"version":3,"sources":["C:/Users/Nyarko Betrand/Desktop/work/foodDelivery/foodApp/components/Shared/Input.js"],"names":["React","useState","BoldText","Icon","Row","COLORS","Input","props","focus","setFocus","marginTop","showLabel","color","fontWeight","label","style","main","borderWidth","backgroundColor","borderColor","green","flex","padding","fontSize","fontFamily","loading","paddingRight","Password","showPassword","setShowPassword","mainpass","flexDirection","alignItems","paddingHorizontal","paddingVertical","Platform","OS","StyleSheet","create","borderRadius","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  TextInput,\r\n  StyleSheet,\r\n  View,\r\n  TouchableOpacity,\r\n  ActivityIndicator,\r\n  Platform,\r\n  Dimensions\r\n} from 'react-native';\r\nimport BoldText from './StyledText';\r\nimport Icon from 'react-native-vector-icons/Entypo';\r\nimport Row from './Row';\r\nimport COLORS from '../../assets/colors/colors';\r\n\r\nexport default function Input(props) {\r\n  const [focus, setFocus] = useState(false);\r\n  return (\r\n    <View style={{ marginTop: 10 }}>\r\n      {props.showLabel ? (\r\n        <BoldText style={{ color: 'grey', fontWeight: '400' }}>\r\n          {props.label}\r\n        </BoldText>\r\n      ) : null}\r\n      <Row\r\n        style={[\r\n          style.main,\r\n          {\r\n            borderWidth: 0.6,\r\n            backgroundColor: \"transparent\",\r\n            borderColor: focus ? COLORS.green : '#e3e3e3',\r\n          },\r\n        ]}>\r\n        <View style={{ flex: 1 }}>\r\n          <TextInput\r\n            onFocus={() => setFocus(true)}\r\n            onBlur={() => setFocus(false)}\r\n            {...props}\r\n            style={[\r\n              {\r\n                padding: 13,\r\n                fontSize: 16,\r\n                fontFamily: 'Rubik-Regular',\r\n                ...props.style,\r\n              },\r\n            ]}\r\n          />\r\n        </View>\r\n        {props.loading ? (\r\n          <ActivityIndicator color={COLORS.green} style={{ paddingRight: 10 }} />\r\n        ) : null}\r\n      </Row>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport function Password(props) {\r\n  const [showPassword, setShowPassword] = useState(true);\r\n  const [focus, setFocus] = useState(false);\r\n  return (\r\n    <View >\r\n      {props.showLabel ? <BoldText style={{ fontWeight: '400' }}>{props.label}</BoldText> : null}\r\n      <View\r\n        style={[\r\n          style.mainpass,\r\n          {\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            paddingHorizontal: 100,\r\n            paddingVertical: Platform.OS === 'android' ? 3 : 13,\r\n            // borderWidth: 0.6,\r\n            backgroundColor: \"transparent\",\r\n            borderColor: focus ? COLORS.green : '#e3e3e3',\r\n          },\r\n        ]}>\r\n        <TextInput\r\n          secureTextEntry={showPassword}\r\n          onBlur={() => setFocus(false)}\r\n          onFocus={() => setFocus(true)}\r\n          {...props}\r\n          style={[{ flex: 1, fontSize: 16, }]}\r\n        />\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            setShowPassword(!showPassword);\r\n          }}>\r\n          <Icon\r\n            color=\"grey\"\r\n            name={showPassword ? 'eye-with-line' : 'eye'}\r\n            size={18}\r\n          />\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst style = StyleSheet.create({\r\n  main: {\r\n    backgroundColor: '#f2f2f2',\r\n    borderWidth: 0.4,\r\n    marginTop: 7,\r\n    borderRadius: 5,\r\n    borderColor: '#e3e3e3',\r\n  },\r\n  mainpass: {\r\n    backgroundColor: '#f2f2f2',\r\n    // borderWidth: 0.4,\r\n    // marginTop: 7,\r\n    borderRadius: 5,\r\n    borderColor: '#e3e3e3',\r\n    width: 300,\r\n\r\n\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}