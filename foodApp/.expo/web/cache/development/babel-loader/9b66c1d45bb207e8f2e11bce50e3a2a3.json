{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nyarko Betrand\\\\Desktop\\\\work\\\\foodDelivery\\\\foodApp\\\\screens\\\\OrderScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport COLORS from \"../assets/colors/colors\";\nimport HeaderAnnex from \"../components/Shared/HeaderAnnex\";\nimport ConfirmScreen from \"./ConfirmScreen\";\nimport SummaryScreen from \"./SummaryScreen\";\nexport default function OrderScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  function CustomTabView(props) {\n    var _this = this;\n\n    var _useState = useState({\n      index: 0,\n      routes: [{\n        key: 'first',\n        title: 'Confirm'\n      }, {\n        key: 'second',\n        title: 'Summary'\n      }]\n    }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n    var _handleIndexChange = function _handleIndexChange(index) {\n      return setState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          index: index\n        });\n      });\n    };\n\n    var _renderTabBar = function _renderTabBar(props) {\n      var inputRange = props.navigationState.routes.map(function (x, i) {\n        return i;\n      });\n      return React.createElement(TabBar, _extends({}, props, {\n        style: {\n          backgroundColor: 'white'\n        },\n        activeColor: COLORS.green,\n        inactiveColor: \"grey\",\n        renderLabel: function renderLabel(_ref2) {\n          var route = _ref2.route,\n              focused = _ref2.focused,\n              color = _ref2.color;\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 25\n            }\n          }, React.createElement(RegularText, {\n            style: {\n              fontSize: 12,\n              color: focused ? COLORS.green : 'grey'\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 29\n            }\n          }, route.title));\n        },\n        labelStyle: {\n          fontSize: 12,\n          fontWeight: 'bold'\n        },\n        indicatorStyle: {\n          padding: 1.5,\n          marginLeft: 0,\n          backgroundColor: COLORS.green\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    var _renderScene = SceneMap({\n      first: Confirm,\n      second: Summary\n    });\n\n    return React.createElement(TabView, {\n      style: {\n        backgroundColor: 'white'\n      },\n      navigationState: state,\n      renderScene: _renderScene,\n      renderTabBar: _renderTabBar,\n      onIndexChange: _handleIndexChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: styles.androidSafeArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, React.createElement(HeaderAnnex, {\n    titleAlign: \"center\",\n    title: \"Order and Summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), React.createElement(CustomTabView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  androidSafeArea: {\n    flex: 1,\n    paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0\n  }\n});","map":{"version":3,"sources":["C:/Users/Nyarko Betrand/Desktop/work/foodDelivery/foodApp/screens/OrderScreen.js"],"names":["React","useContext","useState","COLORS","HeaderAnnex","ConfirmScreen","SummaryScreen","OrderScreen","navigation","CustomTabView","props","index","routes","key","title","state","setState","_handleIndexChange","prevState","_renderTabBar","inputRange","navigationState","map","x","i","backgroundColor","green","route","focused","color","fontSize","fontWeight","padding","marginLeft","_renderScene","SceneMap","first","Confirm","second","Summary","styles","androidSafeArea","StyleSheet","create","flex","paddingTop","Platform","OS","StatusBar","currentHeight"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport { View, Text, TouchableOpacity, StyleSheet, Platform, StatusBar, SafeAreaView, FlatList } from 'react-native'\r\nimport COLORS from '../assets/colors/colors';\r\nimport HeaderAnnex from '../components/Shared/HeaderAnnex'\r\nimport ConfirmScreen from './ConfirmScreen';\r\nimport SummaryScreen from './SummaryScreen';\r\n\r\n\r\nexport default function OrderScreen({ navigation }) {\r\n\r\n\r\n\r\n    function CustomTabView(props) {\r\n        const [state, setState] = useState({\r\n            index: 0,\r\n            routes: [\r\n                { key: 'first', title: 'Confirm' },\r\n                { key: 'second', title: 'Summary' },\r\n\r\n            ],\r\n        });\r\n\r\n        // useEffect(() => {\r\n        //   props.onChangeIndex(state);\r\n        // }, [state]);\r\n\r\n        const _handleIndexChange = index =>\r\n            setState(prevState => ({ ...prevState, index: index }));\r\n\r\n        const _renderTabBar = props => {\r\n            const inputRange = props.navigationState.routes.map((x, i) => i);\r\n\r\n            return (\r\n                <TabBar\r\n                    {...props}\r\n                    style={{ backgroundColor: 'white' }}\r\n                    activeColor={COLORS.green}\r\n                    inactiveColor=\"grey\"\r\n                    renderLabel={({ route, focused, color }) => (\r\n                        <View>\r\n                            <RegularText style={{ fontSize: 12, color: focused ? COLORS.green : 'grey' }}>\r\n                                {route.title}\r\n                            </RegularText>\r\n                        </View>\r\n                    )}\r\n                    labelStyle={{ fontSize: 12, fontWeight: 'bold' }}\r\n                    indicatorStyle={{\r\n\r\n                        padding: 1.5,\r\n                        marginLeft: 0,\r\n                        backgroundColor: COLORS.green,\r\n                    }}\r\n                />\r\n            );\r\n        };\r\n\r\n        const _renderScene = SceneMap({\r\n            first: Confirm,\r\n            second: Summary,\r\n\r\n        });\r\n\r\n        return (\r\n            <TabView\r\n                style={{ backgroundColor: 'white' }}\r\n                navigationState={state}\r\n                renderScene={_renderScene}\r\n                renderTabBar={_renderTabBar}\r\n                onIndexChange={_handleIndexChange}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <SafeAreaView style={styles.androidSafeArea}>\r\n            <HeaderAnnex titleAlign=\"center\" title=\"Order and Summary\" />\r\n            <CustomTabView />\r\n        </SafeAreaView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    androidSafeArea: {\r\n        flex: 1,\r\n        paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\r\n    },\r\n\r\n})\r\n"]},"metadata":{},"sourceType":"module"}